#!/usr/bin/env python3

### –ü–æ—à—É–∫ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
### –¢–∞–∫–æ–∂ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ —Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
### –ü–µ—Ä–µ–º—ñ—â—É—î –∑–Ω–∞–π–¥–µ–Ω–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏
##! –ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —É –∫–∞—Ç–∞–ª–æ–∑—ñ –∑ —Ñ–æ—Ç–æ

import os
import shutil
import imagehash
import cv2
from PIL import Image, ExifTags, UnidentifiedImageError
import numpy as np

ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".tiff", ".bmp", ".gif"}
SIMILARITY_THRESHOLD = 5  # –ß–∏–º –º–µ–Ω—à–µ —á–∏—Å–ª–æ, —Ç–∏–º —Å—É–≤–æ—Ä—ñ—à–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
BACKUP_FOLDER = "duplicates_backup"
corrupted_folder = "corrupted_images"
damaged_folder = "damaged_images"


def get_image_hash(image_path):
    try:
        with Image.open(image_path) as img:
            return imagehash.average_hash(img)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {os.path.basename(image_path)}: {e}")
        return None

def get_exif_datetime(image_path):
    try:
        with Image.open(image_path) as img:
            exif_data = img._getexif()
            if exif_data:
                for tag, value in exif_data.items():
                    tag_name = ExifTags.TAGS.get(tag, tag)
                    if tag_name == "DateTimeOriginal":
                        return value
        return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è EXIF {os.path.basename(image_path)}: {e}")
        return None

def scan_images(directory):
    images = []
    for file in os.listdir(directory):
        file_path = os.path.join(directory, file)
        if os.path.isfile(file_path) and os.path.splitext(file)[1].lower() in ALLOWED_EXTENSIONS:
            images.append(file_path)
    return images

def find_duplicates(image_folder):
    hashes = {}
    duplicate_groups = {}
    images = scan_images(image_folder)

    for file_path in images:
        img_hash = get_image_hash(file_path)
        if img_hash is None:
            continue

        exif_date = get_exif_datetime(file_path)

        # –ü–æ—à—É–∫ –ø–æ–¥—ñ–±–Ω–∏—Ö —Ö–µ—à—ñ–≤
        for existing_hash in hashes.keys():
            if abs(img_hash - existing_hash) <= SIMILARITY_THRESHOLD:
                original_file = hashes[existing_hash]
                original_exif_date = get_exif_datetime(original_file)

                if exif_date and original_exif_date and exif_date != original_exif_date:
                    print(f"‚ùé –ß–∞—Å –∑–π–æ–º–∫–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è: {os.path.basename(file_path)} ({exif_date}) != {os.path.basename(original_file)} ({original_exif_date}), –Ω–µ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –¥—É–±–ª—ñ–∫–∞—Ç–æ–º.")
                    continue

                if existing_hash not in duplicate_groups:
                    duplicate_groups[existing_hash] = {original_file}
                duplicate_groups[existing_hash].add(file_path)
                break
        else:
            hashes[img_hash] = file_path

    # –û–±—Ä–æ–±–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    os.makedirs(BACKUP_FOLDER, exist_ok=True)
    for img_hash, files in duplicate_groups.items():
        original_file = min(files, key=lambda f: (get_exif_datetime(f) or "9999:99:99", os.path.getctime(f)))
        print(f"‚úÖ –ó–∞–ª–∏—à–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª: {os.path.basename(original_file)}")

        for file in files:
            if file != original_file:
                backup_path = os.path.join(BACKUP_FOLDER, os.path.basename(file))
                try:
                    shutil.move(file, backup_path)
                    print(f"‚ôªÔ∏è –î—É–±–ª—ñ–∫–∞—Ç –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {os.path.basename(file)} -> {backup_path}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è {os.path.basename(file)}: {e}")

def is_corrupted(image_path):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º"""
    try:
        with Image.open(image_path) as img:
            img.verify()  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if img.width == 0 or img.height == 0:
                return True  # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
        return False
    except Exception:
        return True  # –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª

def is_damaged(image_path):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º."""
    try:
        with Image.open(image_path) as img:
            img = img.convert("L")  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –≥—Ä–∞–¥–∞—Ü—ñ—ó —Å—ñ—Ä–æ–≥–æ
            img_array = np.array(img)

            # 1. –ê–Ω–∞–ª—ñ–∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤ (—è–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞–π–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É)
            unique_colors, counts = np.unique(img_array.reshape(-1), return_counts=True)
            most_common = np.max(counts) / np.sum(counts)
            if most_common > 0.8:  # –Ø–∫—â–æ 80% –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É, –ø—ñ–¥–æ–∑—Ä—ñ–ª–µ
                print(f"‚ö†Ô∏è {os.path.basename(image_path)} - –ø—ñ–¥–æ–∑—Ä—ñ–ª–µ (–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É)")

                # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É (—á–∏ —î –≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –∫–æ–ª—å–æ—Ä—É)
                contrast = img_array.std()  # –î–∏—Å–ø–µ—Ä—Å—ñ—è —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
                if contrast > 10:  # –Ø–∫—â–æ —î –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ç–æ —Ü–µ, –π–º–æ–≤—ñ—Ä–Ω–æ, —Ç–µ–∫—Å—Ç
                    print(f"‚úÖ {os.path.basename(image_path)} - –∫–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π (–π–º–æ–≤—ñ—Ä–Ω–æ, —Ç–µ–∫—Å—Ç)")
                    return False  # –ù–ï —î –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º

                # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenCV
                edged = cv2.Canny(img_array, 30, 150)  # –í–∏—è–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç—É—Ä—ñ–≤
                edge_density = np.sum(edged > 0) / img_array.size  # –©—ñ–ª—å–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç—É—Ä—ñ–≤
                if edge_density > 0.01:  # –Ø–∫—â–æ —î –∫–æ–Ω—Ç—É—Ä–∏, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç/–¥–µ—Ç–∞–ª—ñ
                    print(f"‚úÖ {os.path.basename(image_path)} - –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç/–∫–æ–Ω—Ç—É—Ä–∏")
                    return False

                return True  # –Ø–∫—â–æ —ñ –∫–æ–ª—å–æ—Ä–∏, —ñ –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —ñ –∫–æ–Ω—Ç—É—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Äì –π–º–æ–≤—ñ—Ä–Ω–æ, –±–∏—Ç–∏–π —Ñ–∞–π–ª

        return False
    except (UnidentifiedImageError, OSError):
        print(f"‚ùå {os.path.basename(image_path)} –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ (–±–∏—Ç–∏–π –∞–±–æ –Ω–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ñ–∞–π–ª)")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {os.path.basename(image_path)}: {e}")
        return True

def check_images(image_folder):
    """–®—É–∫–∞—î –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –∞–±–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ –∑—ñ–ø—Å–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–º—ñ—â—É—î —ó—Ö —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏."""
    os.makedirs(corrupted_folder, exist_ok=True)
    os.makedirs(damaged_folder, exist_ok=True)

    for filename in os.listdir(image_folder):
        file_path = os.path.join(image_folder, filename)
        if not os.path.isfile(file_path) or os.path.splitext(filename)[1].lower() not in ALLOWED_EXTENSIONS:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –Ω–µ —Ñ–∞–π–ª –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è

        if is_corrupted(file_path):
            corrupted_path = os.path.join(corrupted_folder, filename)
            shutil.move(file_path, corrupted_path)
            print(f"‚ö†Ô∏è –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {filename} -> {corrupted_folder} (–±–∏—Ç–∏–π —Ñ–∞–π–ª)")
        elif is_damaged(file_path):
            damaged_path = os.path.join(damaged_folder, filename)
            shutil.move(file_path, damaged_path)
            print(f"‚ö†Ô∏è –í—ñ–∑—É–∞–ª—å–Ω–æ –∑—ñ–ø—Å–æ–≤–∞–Ω–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {filename} -> {damaged_folder} (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏/–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É)")


if __name__ == "__main__":
    folder_path = os.getcwd()
    print(f"üìÇ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏: {folder_path}")
    check_images(folder_path)  # –î–æ–¥–∞—î–º–æ –ø–æ—à—É–∫ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ
    find_duplicates(folder_path)
    print("‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î—É–±–ª—ñ–∫–∞—Ç–Ω—ñ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ 'duplicates_backup'.")
